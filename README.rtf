Radiomics-Driven Diffusion Model and Monte Carlo Compression Sampling for Reliable Medical Image Synthesis

## Requirements
Before running the code, ensure you have the following packages installed:\
- Python 3.7\
- PyTorch 1.8\
- NumPy\
- SciPy\
- Scikit-learn\
- NiBabel\
- scikit-image\
- SimpleITK\
- PyRadiomics\
- CUDA Toolkit 10.2\

## Project Structure
- **Dataload.py**: Contains the `MedicalImageDataset` class for loading and preprocessing the medical images. It includes functionality to slice, normalize, and prepare images for training and testing.\
- **model.py**: Defines the `DiffusionModel` class, which implements the forward and reverse processes of the diffusion model. The model integrates MambaBlock, TransformerModule, and upsampling/downsampling functions.\
- **utils.py**: Contains utility modules such as `MambaBlock`, `TransformerModule`, `UpSampleFunction`, and `DownSampleFunction`, which are used in the model for encoding, decoding, and applying attention mechanisms.\
- **train_riven_mcdm.py**: Script to train the Riven-MCDM model using cross-validation. It saves the trained model for each fold.\
- **test_riven_mcdm.py**: Script to test the trained Riven-MCDM model. It computes the PSNR and SSIM metrics and saves the generated outputs.\
- **RadiomicsExtractor.py**: Contains functions to extract 3D radiomics features from the condition images and corresponding masks using the PyRadiomics library. These features are integrated into the model during both training and testing.\
- **logger.py**: Provides a logging utility for tracking the training and testing processes. It includes functions to log model performance metrics and save logs in a structured format.\
- **nn.py**: Implements custom neural network layers and modules, such as the MambaTrans architecture. It includes attention mechanisms, specialized activation functions, and other components crucial for medical image synthesis.
